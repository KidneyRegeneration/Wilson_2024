---
title: "Stage 2 annotation July 23"
date: "`r Sys.Date()`"
author: "Sean Wilson"
#output:
#  rmdformats::readthedown:
#  highlight: kate
output:
  prettydoc::html_pretty:
    theme: cayman
    highlight: github
    toc: true
knit: (function(inputFile, encoding) { rmarkdown::render(inputFile, encoding = encoding, output_dir = here::here("docs/"))})
---

```{r setup, include=FALSE}
library(knitr)
library(rmdformats)
library(tidyverse)
library(Seurat)
library(patchwork)
source(here::here("code/general_r_functions.R"))
source(here::here("code/project_functions.R"))
source(here::here("code/circle_plot.R"))
source(here::here("code/datavis.R"))
library(plotly)
seed <- 250395
## Global options
options(max.print="1000")
opts_chunk$set(echo=FALSE,
	             cache=FALSE,
               cache.lazy = FALSE,
               prompt=FALSE,
               tidy=TRUE,
               comment=NA,
               message=FALSE,
               warning=FALSE,
               fig.width = 9,
               fig.height = 6,
               dpi = 600,
               echo=FALSE)
opts_knit$set(width=500, root.dir = here::here())
options(future.globals.maxSize = Inf)
```


## Goal

Melissa and I have reevaluated the data in stage 2 and this document will update the data and generate figures for the manuscripts.


## Load stage 2 data


```{r}
s2 <- read_rds("data/rds/Stage2.rds")
stage.md <- read_rds("data/Stages_metadata.rds")
s2$SCT_snn_res.0.3 <- stage.md$s2$SCT_snn_res.0.3
s2$SCT_snn_res.3 <- stage.md$s2$SCT_snn_res.3
```


## General plotting

Plot the UMAPs with groupings of clusters and chir

```{r}
DimPlot(s2, group.by = "SCT_snn_res.0.3")
DimPlot(s2, group.by = "SCT_snn_res.3", label = T, repel = T)

```

```{r}
png(res = 300, filename = "data/figures/Stage2_UMAP_res03.png",units = "mm", width = 200, height = 150)
DimPlot(s2, group.by = "SCT_snn_res.0.3", label = T, label.size = 10) +
   NoAxes() & theme(text = element_text(size = 25), legend.position = "none")
dev.off()
```


```{r}
map2(c("3c", "4c", "5c"), c(1, 2, 3), ~DimPlot(s2, cells.highlight = list(rownames(s2@meta.data %>% filter(chir==.x))), 
                                                                               cols.highlight = ifelse(.x!="unassigned", cc[.y], "black")) + ggtitle(.x) +
   NoAxes() & theme(text = element_text(size = 25), legend.position = "none"))  %>%  wrap_plots(ncol = 3)
```

```{r}
png(res = 300, filename = "data/figures/Stage2_UMAP_chir_split.png",units = "mm", width = 600, height = 200)
map2(c("3c", "4c", "5c"), c(1, 2, 3), ~DimPlot(s2, cells.highlight = list(rownames(s2@meta.data %>% filter(chir==.x))), 
                                                                               cols.highlight = ifelse(.x!="unassigned", cc[.y], "black")) + ggtitle(.x) +
   NoAxes() & theme(text = element_text(size = 25), legend.position = "none"))  %>%  wrap_plots(ncol = 3)
dev.off()
```

## DEGs within clusters


```{r}
s2.markers <- FindAllMarkers(SetIdent(s2, value = "SCT_snn_res.0.3"), only.pos = T, test.use = "t", assay = "RNA") %>% mutate(diff = pct.1-pct.2)
```

```{r, fig.width=12}
filters <- s2.markers %>% dplyr::group_by(cluster) %>% top_n(5, diff)
StrDotPlot(s2, group.by = "SCT_snn_res.0.3", features = unique(filters$gene))
```


```{r}
png(res = 300, filename = "data/figures/Stage2_StrDotPlot_res03markers.png",units = "mm", width = 300, height = 75)
StrDotPlot(s2, group.by = "SCT_snn_res.0.3", features = unique(filters$gene))
dev.off()
```

Check for markers of interest, curated

```{r, fig.width=12, fig.height=12}
StrDotPlot(s2, group.by = "SCT_snn_res.0.3", features = c("DKK1", "SP5", "CXCR4", "TBX6",
                                                               "HOXA10", "HOXC10", "CDX2", "WNT5A", "CDH6",
                                                               "PAX3", "COL11A1", "MYL9", "COL3A1", "TMEM88",
                                                               "ITGA8", "PAX8", "EYA1", "CITED1", "FOXC2",
                                                               "PAX2", "SNAI2", "GDNF", "JAG1",
                                                               "TCF15", "FOXD1", "HES4", "CENPA", "ZIC2", "SFRP2"))
```

## Pseudobulk

```{r}
library(edgeR)
library(limma)
library(org.Hs.eg.db)
library(RColorBrewer)
```

Pseudobulk the counts, using res 0.5 clusters.

```{r}
counts.s2.c <- pseudobulk(s2, "SCT_snn_res.0.3")
dge.s2.c <- DGEList(counts=counts.s2.c, genes=rownames(counts.s2.c), group=colnames(counts.s2.c))
#colnames(dge) <- paste(targets$ID,targets$Group,sep=".")
ann <- AnnotationDbi::select(org.Hs.eg.db, keys=rownames(dge.s2.c), keytype = "SYMBOL", 
              columns=c("ENTREZID","SYMBOL","GENENAME"))
ann <- ann[!duplicated(ann$SYMBOL),]
dge.s2.c$genes <- ann[match(rownames(dge.s2.c),ann$SYMBOL),]
dge.s2.c$genes$LENGTH <- counts.s2.c$Length[rownames(counts.s2.c) %in% rownames(dge.s2.c)]

```


```{r, fig.height=4, fig.width=12}
pal = brewer.pal(10, "Set1") 
pal = DiscretePalette(10, palette = NULL)

par(mfrow=c(1,3))
barplot(dge.s2.c$samples$lib.size, names=colnames(counts.s2.c), las=2, cex.names=0.8,
        ylab="Library size (cpm)", col = pal[factor(colnames(counts.s2.c))],
        cex.axis=0.5)

plotMDS(dge.s2.c, col=pal[factor(colnames(counts.s2.c))], gene.selection = "common",
        labels=colnames(counts.s2.c), dim.plot = c(1,2))
#legend("bottomright", legend=levels(factor(colnames(counts.s2.c))), text.col=pal)

plotMDS(dge.s2.c, col=pal[factor(colnames(counts.s2.c))], gene.selection = "common",
        labels=colnames(counts.s2.c), dim.plot = c(2,3))
#legend("bottomright", legend=levels(factor(colnames(counts.s2.c))), text.col=pal)

```

```{r}
pearson <- cor(counts.s2.c[s2@assays$SCT@var.features,])
pearson %>% NMF::aheatmap()
```



```{r}
ref.dge <- read_rds(here::here("data/AllRef_dge.rds"))
share.genes <- intersect(rownames(ref.dge$counts), rownames(s2))
colnames(counts.s2.c) <- paste0("Stage2_c", colnames(counts.s2.c))
counts.ref.s2 <- bind_cols(list(ref.dge$counts[share.genes,],
                                budjan.sudo[share.genes,],
                                counts.s2.c[share.genes,]))

group=c(rep("Minn", 6), 
        rep("Tyser", 8), 
        rep("DiazCuadros",5), 
        rep("Tan_mouse", 8),
        rep("Stage2", 10))

corrected_data = sva::ComBat_seq(counts = as.matrix(counts.ref.s2), batch = group)


dge.ref.s2 <- DGEList(counts=corrected_data, genes=rownames(corrected_data), group=group)

ann <- AnnotationDbi::select(org.Hs.eg.db, keys=rownames(dge.ref.s2), keytype = "SYMBOL", 
              columns=c("ENTREZID","SYMBOL","GENENAME"))
ann <- ann[!duplicated(ann$SYMBOL),]
dge.ref.s2$genes <- ann[match(rownames(dge.ref.s2),ann$SYMBOL),]

```

```{r, fig.width=12, fig.height=12}
vg <- s2@assays$SCT@var.features
vg <- vg[vg %in% rownames(dge.ref.s2$counts)]
p <- cor(dge.ref.s2$counts[vg,1:31])
NMF::aheatmap(p, border_color = "black", treeheight = c(0, 50))
```


```{r, fig.width=12, fig.height=12}
s2.markers.f <- s2.markers %>% arrange(-avg_log2FC)

genes <- unique(s2.markers.f$gene[s2.markers.f$gene %in% rownames(dge.ref.s2$counts)])[1:1000]
pearson <- cor(dge.ref.s2$counts[genes,c(2,3,4,5,7,8,10,11,13,14,20:37)])
NMF::aheatmap(pearson, border_color = "black", treeheight = c(0, 50),
              annCol = data.frame(ref = factor(dge.ref.s2[genes,c(2,3,4,5,7,8,10,11,13,14,20:37)]$samples$group)))

genes <- s2.markers$gene[s2.markers$gene %in% rownames(dge.s2.c$counts)]
pearson <- cor(dge.s2.c$counts[genes,])
NMF::aheatmap(pearson, border_color = "black", treeheight = c(0, 50))
```



```{r}
png(res = 600, filename = "data/figures/Stage2_heatmap_refs.png",units = "mm", width = 200, height = 200)
genes <- unique(s2.markers.f$gene[s2.markers.f$gene %in% rownames(dge.ref.s2$counts)])[1:1000]
pearson <- cor(dge.ref.s2$counts[genes,c(2,3,4,5,7,8,10,11,13,14,20:37)])
NMF::aheatmap(pearson, border_color = "black", treeheight = c(0, 50),
              annCol = data.frame(Reference = factor(dge.ref.s2[genes,c(2,3,4,5,7,8,10,11,13,14,20:37)]$samples$group)))
dev.off()
```

```{r}
StrDotPlot(s2, group.by = "SCT_snn_res.0.3",
           features = c("OSR1", "ITGA8", "HOXA10", "HOXD10", "HOXD11", "PAX2", "PAX8", "SALL1", "EYA1",
                        "TCF15",
                        "SP5", "FGF8","TBX6", 
                        "FOXF1",
                        "SOX2", "PAX3", 
                        "TAGLN", "NEFM", "NTM", "CRABP1"), dot.scale = 10)
FeaturePlot(s2, features = c("FGF8"), order = T)
```

```{r}
png(res = 300, filename = "data/figures/Stage2_strdotplot_keygenes.png",units = "mm", width = 150, height = 80)
StrDotPlot(s2, group.by = "SCT_snn_res.0.3",
           features = c("SP5", "DLL3", "FGF8","TBX6", 
                        "MIXL1","SOX2", "PAX3",  "TCF15",
                        "OSR1", "ITGA8", "PAX2", "PAX8", "SALL1", "EYA1",
                       
                        "NTM", "GDF10", "CRABP1", 
                        "FOXF1"), dot.scale = 6)
dev.off()
```


## Annotation

```{r}
s2ann <- s2@meta.data %>% mutate(SCT_snn_res.0.3 = as.character(SCT_snn_res.0.3)) %>%
  mutate(ann = case_when(SCT_snn_res.0.3 == "0" ~ "IM_1",
                         SCT_snn_res.0.3 == "1" ~ "nc_Meso", # non-committed mesoderm
                         SCT_snn_res.0.3 == "2" ~ "IM_2",
                         SCT_snn_res.0.3 == "3" ~ "PM_1", # paraxial 1
                         SCT_snn_res.0.3 == "4" ~ "PM_2", # paraxial 2
                         SCT_snn_res.0.3 == "5" ~ "IM_3",
                         SCT_snn_res.0.3 == "6" ~ "PSM-to-IM", # population is mostly transitioning fromt he PSM stage to mesoderm
                         SCT_snn_res.0.3 == "7" ~ "NP_1", #neural progenitor 1
                         SCT_snn_res.0.3 == "8" ~ "PSM", # PSM
                         SCT_snn_res.0.3 == "9" ~ "NP_2", # neural progenitor 2
                         TRUE ~ SCT_snn_res.0.3))

write_csv(s2ann, here::here("data/tables/Stage2_Annotation_df.csv"))
s2$ann <- s2ann$ann
```


```{r}
png(res = 600, filename = "data/figures/Stage2_UMAP_ann.png",units = "mm", width = 200, height = 150)
DimPlot(s2, group.by = "ann", label=T, repel=T, label.size = 6) +
  NoAxes() & theme(text = element_text(size = 25))
dev.off()
```


```{r, fig.width=12}
map(c("FGF8", "ITGA8", "PAX8", "PAX2", "HOXD11", "PAX3", "SOX2", "TAGLN", "TCF15"), ~FeaturePlot(s2, features = .x, cols = c("lightgrey", "black"), order=T))
(FeaturePlot(s2, features = c("PAX3", "SOX2"), blend = T, order=T, pt.size = 2) & NoAxes()) /
(FeaturePlot(s2, features = c("TCF15", "PAX8"), blend = T, order=T, pt.size = 2) & NoAxes())
```


```{r}
png(res = 600, filename = "data/figures/Stage2_blendedUMAP_IM_PM_NMP_wAxes.png",units = "mm", width = 400, height = 200)
(FeaturePlot(s2, features = c("PAX3", "SOX2"), blend = T, order=T, pt.size = 1) ) /
(FeaturePlot(s2, features = c("TCF15", "PAX8"), blend = T, order=T, pt.size = 1) )
dev.off()

png(res = 600, filename = "data/figures/Stage2_blendedUMAP_IM_PM_NMP.png",units = "mm", width = 400, height = 200)
(FeaturePlot(s2, features = c("PAX3", "SOX2"), blend = T, order=T, pt.size = 1) & NoAxes()) /
(FeaturePlot(s2, features = c("TCF15", "PAX8"), blend = T, order=T, pt.size = 1) & NoAxes())
dev.off()
```

```{r}
write_rds(s2, "data/rds/Stage2.rds")
```

